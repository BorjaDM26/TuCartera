/* Generated by Oracle SQL Developer Data Modeler 20.4.1.406.0906
--   at:        2021-04-10 12:05:30 CEST
--   site:      SQL Server 2012
--   type:      SQL Server 2012
--	 Creado por:	Borja Delgado Martin
*/

/*------------------------------------------------------
--  CREATE DATABASE
------------------------------------------------------*/
DROP DATABASE IF EXISTS tu_cartera_bd
GO
CREATE DATABASE tu_cartera_bd COLLATE Traditional_Spanish_CI_AS
GO


/*------------------------------------------------------
--  CREATE TABLES
------------------------------------------------------*/
CREATE TABLE [tu_cartera_bd].[dbo].[user] 
    (
     id INTEGER NOT NULL IDENTITY(1,1) , 
     name VARCHAR (50) NOT NULL , 
     email VARCHAR (200) NOT NULL UNIQUE, 
     pass BINARY(32) NOT NULL ,
     CONSTRAINT user_pk PRIMARY KEY (id)
    )
GO

CREATE TABLE [tu_cartera_bd].[dbo].[currency] 
    (
     id INTEGER NOT NULL IDENTITY(1,1) , 
     code VARCHAR (5) NOT NULL ,
     name VARCHAR (50) NOT NULL , 
     CONSTRAINT currency_pk PRIMARY KEY (id)
    )
GO

CREATE TABLE [tu_cartera_bd].[dbo].[portfolio] 
    (
     id INTEGER NOT NULL IDENTITY(1,1) , 
     name VARCHAR (200) NOT NULL ,
     is_global BIT NOT NULL,
     description VARCHAR(MAX) , 
     user_id INTEGER NOT NULL,
     CONSTRAINT portfolio_pk PRIMARY KEY (id) ,
     CONSTRAINT portfolio_user_fk FOREIGN KEY (user_id) REFERENCES [tu_cartera_bd].[dbo].[user](id) 
        ON DELETE CASCADE ON UPDATE CASCADE
    )
GO

CREATE TABLE [tu_cartera_bd].[dbo].[ticker] 
    (
     id INTEGER NOT NULL IDENTITY(1,1) , 
     code VARCHAR (10) NOT NULL , 
     name VARCHAR (200) NOT NULL ,
     CONSTRAINT ticker_pk PRIMARY KEY (id)
    )
GO

CREATE TABLE [tu_cartera_bd].[dbo].[portfolio_tickers] 
    (
     portfolio_id INTEGER NOT NULL , 
     ticker_id INTEGER NOT NULL ,
     CONSTRAINT portfolio_tickers_pk PRIMARY KEY (portfolio_id,ticker_id) ,
     CONSTRAINT portfolio_tickers_portfolio_fk FOREIGN KEY (portfolio_id) REFERENCES [tu_cartera_bd].[dbo].[portfolio](id) 
        ON DELETE CASCADE ON UPDATE CASCADE ,
     CONSTRAINT portfolio_tickers_ticker_fk FOREIGN KEY (ticker_id) REFERENCES [tu_cartera_bd].[dbo].[ticker](id) 
        ON DELETE CASCADE ON UPDATE CASCADE
    )
GO

CREATE TABLE [tu_cartera_bd].[dbo].[transaction_type] 
    (
     id INTEGER NOT NULL IDENTITY(1,1) , 
     type VARCHAR (50) NOT NULL , 
     description VARCHAR(MAX) ,
     CONSTRAINT transaction_type_pk PRIMARY KEY (id) ,
    )
GO

CREATE TABLE [tu_cartera_bd].[dbo].[transaction] 
    (
     id INTEGER NOT NULL IDENTITY(1,1) , 
     number_of_shares NUMERIC (28) NOT NULL , 
     unit_price DECIMAL (16,8) NOT NULL ,
     exchange_to_usd DECIMAL (16,8) NOT NULL ,  
     date DATE NOT NULL , 
     comment VARCHAR(MAX) , 
     user_id INTEGER NOT NULL , 
     transaction_type_id INTEGER NOT NULL , 
     currency_id INTEGER NOT NULL , 
     ticker_id INTEGER NOT NULL ,
     CONSTRAINT transaction_pk PRIMARY KEY (id) ,
     CONSTRAINT transaction_user_fk FOREIGN KEY (user_id) REFERENCES [tu_cartera_bd].[dbo].[user](id) 
        ON DELETE CASCADE ON UPDATE CASCADE ,
     CONSTRAINT transaction_transaction_type_fk FOREIGN KEY (transaction_type_id) REFERENCES [tu_cartera_bd].[dbo].[transaction_type](id) 
        ON DELETE CASCADE ON UPDATE CASCADE ,
     CONSTRAINT transaction_currency_fk FOREIGN KEY (currency_id) REFERENCES [tu_cartera_bd].[dbo].[currency](id) 
        ON DELETE CASCADE ON UPDATE CASCADE ,
     CONSTRAINT transaction_ticker_fk FOREIGN KEY (ticker_id) REFERENCES [tu_cartera_bd].[dbo].[ticker](id) 
        ON DELETE CASCADE ON UPDATE CASCADE
    )
GO


/*------------------------------------------------------
--  CREATE STORED PROCEDURES
------------------------------------------------------*/
USE [tu_cartera_bd]
GO

/*-- Users --*/
-- Description: Get user info
CREATE OR ALTER PROCEDURE [spUserGetLogin]
    @user_id INTEGER
AS
BEGIN
    SET NOCOUNT ON

    SELECT U.[id] as 'user_id', U.[name] as 'user_name', U.[email] as 'user_email'
    FROM [tu_cartera_bd].[dbo].[user] as U
    WHERE U.[id] = @user_id
END
GO

-- Description: Check user credentials
CREATE OR ALTER PROCEDURE [spUserPostLogin]
    @user_email NVARCHAR(200), 
    @user_pass NVARCHAR(200)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @user_id INTEGER;
    DECLARE @passHash BINARY(32);
    SELECT @passHash = HASHBYTES('SHA2_256', @user_pass);
    
    SELECT @user_id = U.[id]
        FROM [dbo].[user] as U 
        WHERE U.[email] = @user_email AND U.[pass] = @passHash;

    IF(@user_id is null)
        SET @user_id = -1

    SELECT @user_id as [user_id]
END
GO

-- Description: Add a new user in the system
CREATE OR ALTER PROCEDURE [spUserRegister]
    @user_name NVARCHAR(50), 
    @user_email NVARCHAR(200), 
    @user_pass NVARCHAR(200)
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        DECLARE @user_id INTEGER;
        DECLARE @passHash BINARY(32);
        SELECT @passHash = HASHBYTES('SHA2_256', @user_pass);

        INSERT INTO [dbo].[user] (name, email, pass)
          VALUES(@user_name, @user_email, @passHash)

        SELECT @user_id = U.[id]
            FROM [dbo].[user] as U 
            WHERE U.[email] = @user_email AND U.[pass] = @passHash;

        INSERT INTO [dbo].[portfolio] (name, is_global, description, user_id)
          VALUES('GLOBAL', 1, 'Datos acumulados de todas las transacciones', @user_id)

        SELECT @user_id as 'user_id', @user_name as 'user_name', @user_email as 'user_email'
    END TRY
    BEGIN CATCH
    END CATCH
END
GO


/*-- Transactions --*/
-- Description: Get transactions list of a user
CREATE OR ALTER PROCEDURE [spTransactionList]
    @user_id INTEGER
AS
BEGIN
    SET NOCOUNT ON

    SELECT TS.[id] as 'transaction_id', TS.[number_of_shares] as 'transaction_shares', 
           TS.[unit_price] as 'transaction_unit_price', TS.[exchange_to_usd] as 'transaction_exchange',
           TS.[date] as 'transaction_date', TS.[comment] as 'transaction_comment', 
           TC.[id] as 'ticker_id', TC.[code] as 'ticker_code', TC.[name] as 'ticker_name', 
           C.[id] as 'currency_id', C.[code] as 'currency_code', 
           TT.[id] as 'transaction_type_id', TT.[type] as 'transaction_type_type'
    FROM [dbo].[transaction] as TS, [dbo].[ticker] as TC, 
		 [dbo].[currency] as C, [dbo].[transaction_type] as TT
    WHERE TS.[user_id] = @user_id and TS.[ticker_id] = TC.[id] and TS.[currency_id] = C.[id] and 
          TS.[transaction_type_id] = TT.[id]
    ORDER BY TS.[date] DESC
END
GO

-- Description: Get transaction item by id
CREATE OR ALTER PROCEDURE [spTransactionItem]
    @transaction_id INTEGER
AS
BEGIN
    SET NOCOUNT ON

    SELECT TS.[id] as 'transaction_id', TS.[number_of_shares] as 'transaction_shares', 
           TS.[unit_price] as 'transaction_unit_price', TS.[exchange_to_usd] as 'transaction_exchange',
           TS.[date] as 'transaction_date', TS.[comment] as 'transaction_comment', 
           TC.[id] as 'ticker_id', TC.[code] as 'ticker_code', TC.[name] as 'ticker_name', 
           C.[id] as 'currency_id', C.[code] as 'currency_code', 
           TT.[id] as 'transaction_type_id', TT.[type] as 'transaction_type_type'
    FROM [dbo].[transaction] as TS, [dbo].[ticker] as TC, 
		 [dbo].[currency] as C, [dbo].[transaction_type] as TT
    WHERE TS.[id] = @transaction_id and TS.[ticker_id] = TC.[id] and TS.[currency_id] = C.[id] and 
          TS.[transaction_type_id] = TT.[id]
    ORDER BY TS.[date] DESC
END
GO

-- Description: Add a new transaction
CREATE OR ALTER PROCEDURE [spTransactionAdd]
    @shares NUMERIC (28),
    @price DECIMAL (16,8),
    @exchange DECIMAL (16,8),
    @date DATE,
    @comment VARCHAR(MAX) = null,
    @user_id INTEGER,
    @transaction_type_id INTEGER,
    @currency_id INTEGER,
    @ticker_id INTEGER
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        DECLARE @transaction TABLE([transaction_id] INTEGER);

        INSERT INTO [dbo].[transaction] (number_of_shares, unit_price, exchange_to_usd, date, comment, user_id, transaction_type_id, currency_id, ticker_id)
          OUTPUT INSERTED.id as 'transaction_id' INTO @transaction
          VALUES(@shares, @price, @exchange, @date, @comment, @user_id, @transaction_type_id, @currency_id, @ticker_id);
        
		SELECT [transaction_id] from @transaction
    END TRY
    BEGIN CATCH
        SELECT -1 as 'transaction_id'
    END CATCH
END
GO

-- Description: Update an existing transaction
CREATE OR ALTER PROCEDURE [spTransactionEdit]
    @transaction_id INTEGER,
    @shares NUMERIC (28),
    @price DECIMAL (16,8),
    @exchange DECIMAL (16,8),
    @date DATE = null,
    @comment VARCHAR(MAX),
    @transaction_type_id INTEGER,
    @currency_id INTEGER,
    @ticker_id INTEGER
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        DECLARE @transaction TABLE([transaction_id] INTEGER);

        UPDATE [dbo].[transaction]
          SET [number_of_shares] = @shares, [unit_price] = @price, [exchange_to_usd] = @exchange, [date] = @date, [comment] = @comment, 
              [transaction_type_id] = @transaction_type_id, [currency_id] = @currency_id, [ticker_id] = @ticker_id
          OUTPUT INSERTED.id as 'transaction_id' INTO @transaction
          WHERE [id] = @transaction_id;
        
		SELECT [transaction_id] from @transaction
    END TRY
    BEGIN CATCH
        SELECT -1 as 'transaction_id'
    END CATCH
END
GO

-- Description: Delete an existing transaction
CREATE OR ALTER PROCEDURE [spTransactionDelete]
    @transaction_id INTEGER
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        DECLARE @transaction TABLE([transaction_id] INTEGER);

        DELETE [dbo].[transaction]
          OUTPUT DELETED.id as 'transaction_id' INTO @transaction
          WHERE [id] = @transaction_id;
        
		SELECT [transaction_id] from @transaction
    END TRY
    BEGIN CATCH
        SELECT -1 as 'transaction_id'
    END CATCH
END
GO


/*-- Portfolios --*/
-- Description: Get transactions list of a user
CREATE OR ALTER PROCEDURE [spPortfolioList]
    @user_id INTEGER
AS
BEGIN
    SET NOCOUNT ON

    (SELECT P.[id] as 'portfolio_id', P.[name] as 'portfolio_name', P.[is_global] as 'portfolio_global', 
            P.[description] as 'portfolio_description', NULL as 'ticker_id'
    FROM [dbo].[portfolio] as P
    WHERE P.[user_id] = @user_id and P.[is_global] = 1)
    UNION
    (SELECT P.[id] as 'portfolio_id', P.[name] as 'portfolio_name', P.[is_global] as 'portfolio_global', 
            P.[description] as 'portfolio_description', PT.[ticker_id] as 'ticker_id'
    FROM [dbo].[portfolio] as P, [dbo].[portfolio_tickers] as PT
    WHERE P.[user_id] = @user_id and P.[id] = PT.[portfolio_id])
    ORDER BY P.[is_global] DESC, P.[name] ASC
END
GO

-- Description: Get portfolio item by id
CREATE OR ALTER PROCEDURE [spPortfolioItem]
    @portfolio_id INTEGER
AS
BEGIN
    SET NOCOUNT ON

    (SELECT P.[id] as 'portfolio_id', P.[name] as 'portfolio_name', P.[is_global] as 'portfolio_global', 
            P.[description] as 'portfolio_description', NULL as 'ticker_id'
    FROM [dbo].[portfolio] as P
    WHERE P.[id] = @portfolio_id and P.[is_global] = 1)
    UNION
    (SELECT P.[id] as 'portfolio_id', P.[name] as 'portfolio_name', P.[is_global] as 'portfolio_global', 
            P.[description] as 'portfolio_description', PT.[ticker_id] as 'ticker_id'
    FROM [dbo].[portfolio] as P, [dbo].[portfolio_tickers] as PT
    WHERE P.[id] = @portfolio_id and P.[id] = PT.[portfolio_id])
END
GO

-- Description: Add a new portfolio
CREATE OR ALTER PROCEDURE [spPortfolioAdd]
    @name VARCHAR (200),
    @description VARCHAR(MAX) = null,
    @user_id INTEGER,
    @ticker_ids VARCHAR (200)
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        DECLARE @portfolio TABLE([portfolio_id] INTEGER);
		DECLARE @ticker TABLE ([ticker_id] INTEGER);

        INSERT INTO [dbo].[portfolio] (name, is_global, description, user_id)
          OUTPUT INSERTED.id as 'portfolio_id' INTO @portfolio
          VALUES(@name, 0, @description, @user_id);

		INSERT INTO @ticker
		  SELECT value as ticker_id 
		  FROM STRING_SPLIT(@ticker_ids, ',');
        
        INSERT INTO [dbo].[portfolio_tickers]
            SELECT P.[portfolio_id], T.[ticker_id] 
            FROM @portfolio as P, @ticker as T;
        
		SELECT [portfolio_id] from @portfolio
    END TRY
    BEGIN CATCH
        SELECT -1 as 'portfolio_id'
    END CATCH
END
GO

-- Description: Update an existing portfolio
CREATE OR ALTER PROCEDURE [spPortfolioEdit]
    @portfolio_id INTEGER,
    @name VARCHAR (200),
    @description VARCHAR(MAX) = null,
    @ticker_ids VARCHAR (200)
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        DECLARE @portfolio TABLE([portfolio_id] INTEGER);
		DECLARE @ticker TABLE ([ticker_id] INTEGER);

        UPDATE [dbo].[portfolio]
          SET [name] = @name, [description] = @description
          OUTPUT INSERTED.id as 'portfolio_id' INTO @portfolio
          WHERE [id] = @portfolio_id;

		INSERT INTO @ticker
		  SELECT value as ticker_id 
		  FROM STRING_SPLIT(@ticker_ids, ',');

        DELETE FROM [dbo].[portfolio_tickers]
            WHERE [portfolio_id] = @portfolio_id;
        
        INSERT INTO [dbo].[portfolio_tickers]
            SELECT P.[portfolio_id], T.[ticker_id] 
            FROM @portfolio as P, @ticker as T;
        
		SELECT [portfolio_id] from @portfolio
    END TRY
    BEGIN CATCH
        SELECT -1 as 'portfolio_id'
    END CATCH
END
GO

-- Description: Delete an existing portfolio
CREATE OR ALTER PROCEDURE [spPortfolioDelete]
    @portfolio_id INTEGER
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        DECLARE @portfolio TABLE([portfolio_id] INTEGER);

        DELETE [dbo].[portfolio]
          OUTPUT DELETED.id as 'portfolio_id' INTO @portfolio
          WHERE [id] = @portfolio_id;
        
		SELECT [portfolio_id] from @portfolio
    END TRY
    BEGIN CATCH
        SELECT -1 as 'portfolio_id'
    END CATCH
END
GO

/*-- Tickers --*/
-- Description: Get user tickers current state
CREATE OR ALTER PROCEDURE [spTickersState]
    @user_id INTEGER
AS
BEGIN
    SET NOCOUNT ON

    SELECT TI.[id] as 'ticker_id', TI.[code] as 'ticker_code', TI.[name] as 'ticker_name',
        SUM(TR.[number_of_shares] * (CASE WHEN TT.[id] = 1 THEN 1 WHEN TT.[id] = 2 THEN '-1' ELSE 0 END)) as 'current_shares', 
        SUM(TR.[number_of_shares] * TR.[unit_price] * TR.[exchange_to_usd] * (CASE WHEN TT.[id] IN (1,4) THEN 1 ELSE '-1' END)) as 'total_invested'
    FROM [dbo].[ticker] as TI, [dbo].[transaction] as TR, [dbo].[transaction_type] as TT
    WHERE TR.[user_id] = @user_id and TI.[id] = TR.[ticker_id] and TR.[transaction_type_id] = TT.[id]
    GROUP BY TI.[id], TI.[code], TI.[name]
    ORDER BY TI.[code] ASC, TI.[name] ASC;
END
GO

-- Description: Get user tickers
CREATE OR ALTER PROCEDURE [spTickersUsed]
    @user_id INTEGER
AS
BEGIN
    SET NOCOUNT ON

    SELECT TI.[id] as 'ticker_id', TI.[code] as 'ticker_code', TI.[name] as 'ticker_name'
    FROM [dbo].[ticker] as TI, [dbo].[transaction] as TR
    WHERE TR.[user_id] = @user_id and TI.[id] = TR.[ticker_id]
    GROUP BY TI.[id], TI.[code], TI.[name]
    ORDER BY TI.[code] ASC, TI.[name] ASC;
END
GO

-- Description: Populate tickers table from external API
CREATE OR ALTER PROCEDURE [spTickersPopulate]
    @api_key VARCHAR (32)
AS
BEGIN
    SET NOCOUNT ON

    DECLARE @token INT;
    DECLARE @ret INT;
    DECLARE @url NVARCHAR(MAX);
    DECLARE @json AS TABLE(Json_Table NVARCHAR(MAX));
    DECLARE @tickers_count INT;

    SELECT @tickers_count = COUNT(*) FROM [dbo].[ticker];

    IF @tickers_count = 0
    BEGIN
        SET @url = 'https://financialmodelingprep.com/api/v3/stock/list?apikey=' + @api_key;

        -- Creates the new object
        EXEC @ret = sp_OACreate 'MSXML2.XMLHTTP', @token OUT;
        IF @ret <> 0 RAISERROR('Unable to open HTTP connection.', 10, 1);

        -- Calls the necessary methods
        EXEC @ret = sp_OAMethod @token, 'open', NULL, 'GET', @url, 'false';
        EXEC @ret = sp_OAMethod @token, 'send';

        -- Grab the responseText property and insert the JSON string into the table
        INSERT into @json (Json_Table) EXEC sp_OAGetProperty @token, 'responseText'

        -- Select the JSON string from the Table we just inserted it into. You'll also be able to see the entire string with this statement.
        INSERT INTO [dbo].[ticker] ([code], [name])
        SELECT symbol as code, name
        FROM OPENJSON((SELECT * FROM @json))
        CROSS APPLY OPENJSON([value])
        WITH(
            [symbol] NVARCHAR(10),
            [name] NVARCHAR(200)
        )
    END
END
GO


/*-- Common selectors --*/
-- Description: Get currency list
CREATE OR ALTER PROCEDURE [spCurrencyList]
AS
BEGIN
    SET NOCOUNT ON

    SELECT [id] as 'currency_id', [code] as 'currency_code', [name] as 'currency_name'
    FROM [dbo].[currency]
    ORDER BY [code] ASC
END
GO

-- Description: Get ticker list
CREATE OR ALTER PROCEDURE [spTickerList]
AS
BEGIN
    SET NOCOUNT ON

    SELECT [id] as 'ticker_id', [code] as 'ticker_code', [name] as 'ticker_name'
    FROM [dbo].[ticker]
    ORDER BY [code] ASC
END
GO

-- Description: Get transaction type list
CREATE OR ALTER PROCEDURE [spTransactionTypeList]
AS
BEGIN
    SET NOCOUNT ON

    SELECT [id] as 'transaction_type_id', [type] as 'transaction_type_type', [description] as 'transaction_type_description'
    FROM [dbo].[transaction_type]
    ORDER BY [id] ASC
END
GO

